.header {
    &__title {
        color: green;
    }
}

.container {
    background-color: #eee;
    width: 1000px;
    margin: 30px auto;

    display: grid;
    grid-template-rows: repeat(2, 150px);
    grid-template-columns: repeat(3, 1fr);
    //grid-template-columns: repeat(2, 150px) 1fr;
    //grid-template-columns: 1fr 2fr 1fr;
    //grid-template-columns: 50% 1fr 1fr;
    gap: 30px;
}

.item {
    padding: 20px;
    font-size: 30px;
    color: white;

    &--1 {
        background-color: orangered;
        // grid-row-start: 2;
        // grid-row-end: 3;
        // grid-column-start: 2;
        // grid-column-end: 3;

        grid-row: 2/3;
        grid-column: 2/3;

        z-index: 10;
    }

    &--2 {
        background-color: green;
       // grid-column: 2 / span 2 //starts at column 2 and spans over two columns
       grid-column: 2 / -1; //start at column 2 and span to the end of the row
    }

    &--3 {
        background-color: blueviolet;
        grid-area: 2/1/3/3;
    }

    &--4 {
        background-color: palevioletred;
    }

    &--5 {
        background-color: blue;
        // grid-row: 1/2;
        // grid-column: 3/4;
        grid-area: 1/3/3/4; //grid-row-start / grid-column-start / grid-row-end / grid-column-end
    }

    &--6 {
        background-color: brown;
        grid-area: 1/2/2/3;
    }

}

// Grid layout using line numbers

    // .layout {
    //     background-color: #eee;
    //     width: 1000px;
    //     margin: 30px auto;

    //     display: grid;
    //     grid-template-rows: 1fr 2fr 4fr 1fr;
    //     grid-template-columns: repeat(3, 1fr) 15%;
    //     gap: 30px;
    // }

    // .block {
    //     padding: 20px;
    //     font-size: 30px;
    //     color: white;
    //     background-color: red;

    //     &--header {
    //         grid-column: 1 / -1;
    //     }

    //     &--main {
    //         grid-column: 1 / span 3;
    //     }
        
    //     &--side {
    //         grid-area: 2/4/4/5;
    //     }

    //     &--footer {
    //         grid-column: 1 / -1;
            
    //     }
    // }

// Grid using line names
//     .layout {
//         background-color: #eee;
//         width: 1000px;
//         margin: 30px auto;

//         display: grid;
//         grid-template-rows: [header-start] 1fr [header-end box-start] 2fr [box-end main-start] 4fr [main-end footer-start] 1fr [footer-end];
//         grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 15% [grid-end];
//         gap: 30px;
//     }

//     .block {
//         padding: 20px;
//         font-size: 30px;
//         color: white;
//         background-color: red;

//         &--header {
//             // grid-column: 1 / -1;
//             grid-column: col-start 1 / grid-end;
//         }

//         &--main {
//             // grid-column: 1 / span 3;

//             grid-column: col-start 1 / col-end 3;
            
//         }
        
//         &--side {
//             // grid-area: 2/4/4/5;

//             //grid-row: 2 / span 2;

//             grid-row: box-start / main-end;

//             // grid-column: 4 / 5;

//             grid-column: col-end 3 / grid-end;
            
//         }

//         &--footer {
//             // grid-column: 1 / -1;

//             grid-column: col-start 1 / grid-end;
            
//         }
//     }

// Grid using grid areas
.layout {
    background-color: #eee;
    width: 1000px;
    margin: 30px auto;

    display: grid;
    grid-template-rows: 1fr 2fr 4fr 1fr;
    grid-template-columns: repeat(3, 1fr) 15%;
    grid-template-areas:  
        "header header header header"
        "box1 box2 box3 sidebar"
        "main main main sidebar"
        "footer footer footer footer";
    gap: 30px;
}

.block {
    padding: 20px;
    font-size: 30px;
    color: white;
    background-color: red;

    &--header {
        grid-area: header;
    }

    &--box1 {
        grid-area: box1;
    }

    &--box2 {
        grid-area: box2; 
    }

    &--box3 {
        grid-area: box3; 
    }

    &--main {
        grid-area: main;
    }
    
    &--side {
        grid-area: sidebar;
    }

    &--footer {
        grid-area: footer; 
    }
}

//Explicit and implicit grids
.content {
    background-color: #eee;
    width: 1000px;
    height: 1000px;
    margin: 30px auto;

    display: grid;
    gap: 30px;

    //Align grid items to grid areas
    grid-auto-rows: 80px; //sets the height of the implicit grid rows to 80px
    grid-auto-columns: .5fr; //sets the width of the implicit grid column to .5fr
    grid-auto-flow: row dense; //Stipulates how the implicit grid is laid out. Defaults to rows. The dense keyword tells grid to fill up any gaps with items.
 
    // align-items: center; //aligns items vertically in the grid area. Default is stretch.
    // justify-items: center; //aligns items horizontall in the grid area.

    //Align grid tracks to grid container
    grid-template-columns: repeat(2, 200px);
    grid-template-rows: repeat(2, 100px);
    justify-content: center; //aligns tracks horizonally (as in flexbox)
    align-content: center; //aligns tracks vertically (as in flexbox)

  

    .cell {
        padding: 10px;
        color: white;
        font-size: 30px;
        background-color: orangered;
        

        &--4 {
            background-color: crimson;
            grid-row: 2 / span 3;
            align-self: end; //overrides the stated align-items
            justify-self: start; //overrides the stated justify-items
        }

        &--6 {
            background-color: lightcoral;
            grid-row: 2 / span 2;
            
        }

        &--7 {
            background-color: palevioletred;
            grid-column: 1 / -1;
        }
    }
}

//Mincontent, maxcontent, minmax function
.stuff {
    background-color: #eee;
    //width: 1000px;
     width: 80%;
    height: 1000px;
    margin: 30px auto;

    display: grid;
    // grid-template-rows: repeat(2, 200px);
    //max-content sets the width as wide as it needs to be to accomodate the content without a linebreak
    //min-content sets the width as wide as it needs to accomodate the content without regard to linkebreak
    // grid-template-columns: max-content 1fr 1fr min-content; 
    //grid-template-rows: repeat(2, min-content);

    //Using minmax function
    //minmax makes the rows a minimum of 150px high or at a max the min-content
    //grid-template-rows: repeat(2, minmax(150px, min-content)); 
    //minmax makes the first column a minimum of 200px and a max of 50% of the grid
    //grid-template-columns: minmax(200px, 50%) repeat(3, 1fr);

    //Using autofill and auto fit
    grid-template-rows: repeat(2, minmax(150px, min-content));
    //Autofill will create 100px columns to fill up the width of the grid
    //grid-template-columns: repeat(auto-fill, 100px);

    //Autofit will create 100px columns and collapse any extra space that does not have content
    //grid-template-columns: repeat(auto-fit, 100px);
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-auto-rows: 150px;



    .junk {
        padding: 10px;
        color: white;
        font-size: 30px;
        background-color: orangered;

        &--1 {
           background-color: orangered; 
        }

        &--2 {
            background-color: yellowgreen; 
         }

         &--3 {
            background-color: blueviolet; 
         }

         &--4 {
            background-color: palevioletred; 
         }

         &--5 {
            background-color: royalblue; 
         }

         &--6 {
            background-color: goldenrod; 
         }

         &--7 {
            background-color: darkslategray; 
         }

         &--8 {
            background-color: orangered; 
         }
    
    }
}

